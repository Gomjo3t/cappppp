import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';

class MyGoalPage extends StatefulWidget {
  final VoidCallback? onBackToHome;
  const MyGoalPage({Key? key, this.onBackToHome}) : super(key: key);

  @override
  State<MyGoalPage> createState() => _MyGoalPageState();
}

class _MyGoalPageState extends State<MyGoalPage> {
  List<Map<String, dynamic>> healthGoals = [];
  List<Map<String, dynamic>> personalGoals = [];

  String healthTitle = 'HEALTH GOALS';
  String personalTitle = 'PERSONAL GOALS';

  @override
  void initState() {
    super.initState();
    _loadGoals();
  }

  Future<void> _loadGoals() async {
    final prefs = await SharedPreferences.getInstance();

    setState(() {
      healthGoals = prefs.getString('healthGoals') != null
          ? List<Map<String, dynamic>>.from(
              json.decode(prefs.getString('healthGoals')!))
          : [
              {
                'label': 'Finish 3 workouts this week',
                'icon': Icons.flag.codePoint,
                'progress': 0.66,
                'done': false
              },
              {
                'label': 'Walk 10,000 steps a day',
                'icon': Icons.directions_walk.codePoint,
                'done': false
              },
            ];

      personalGoals = prefs.getString('personalGoals') != null
          ? List<Map<String, dynamic>>.from(
              json.decode(prefs.getString('personalGoals')!))
          : [
              {
                'label': 'Read 10 pages',
                'icon': Icons.emoji_events.codePoint,
                'done': false
              },
              {
                'label': 'Practice gratitude',
                'icon': Icons.flash_on.codePoint,
                'due': 'Sep 30',
                'done': false
              },
            ];
    });
  }

  Future<void> _saveGoals() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('healthGoals', json.encode(healthGoals));
    await prefs.setString('personalGoals', json.encode(personalGoals));
  }

  void _toggleGoal(List<Map<String, dynamic>> goals, int index) {
    setState(() {
      if (goals[index]['done'] == true) {
        // If already done â†’ delete
        goals.removeAt(index);
      } else {
        // Otherwise mark as done
        goals[index]['done'] = true;
      }
    });
    _saveGoals();
  }

  void _changeSectionName(bool isHealth) {
    showDialog(
      context: context,
      builder: (ctx) {
        TextEditingController controller =
            TextEditingController(text: isHealth ? healthTitle : personalTitle);

        return AlertDialog(
          title: const Text("Change Section Title"),
          content: TextField(controller: controller),
          actions: [
            TextButton(
              onPressed: () {
                setState(() {
                  if (isHealth) {
                    healthTitle = controller.text;
                  } else {
                    personalTitle = controller.text;
                  }
                });
                Navigator.pop(ctx);
              },
              child: const Text("Save"),
            ),
          ],
        );
      },
    );
  }

  void _showAddGoalDialog() {
    final TextEditingController labelController = TextEditingController();
    final TextEditingController dueDateController = TextEditingController();
    bool isHealth = true;
    bool includeProgress = false;
    double progressValue = 0.0;

    showDialog(
      context: context,
      builder: (ctx) {
        return StatefulBuilder(
          builder: (ctx, setStateDialog) {
            return AlertDialog(
              title: const Text('Add New Goal'),
              content: SingleChildScrollView(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text('Goal Category'),
                    const SizedBox(height: 6),
                    DropdownButton<bool>(
                      value: isHealth,
                      isExpanded: true,
                      onChanged: (value) {
                        if (value == null) return;
                        setStateDialog(() {
                          isHealth = value;
                        });
                      },
                      items: const [
                        DropdownMenuItem(
                          value: true,
                          child: Text('Health Goal'),
                        ),
                        DropdownMenuItem(
                          value: false,
                          child: Text('Personal Goal'),
                        ),
                      ],
                    ),
                    const SizedBox(height: 12),
                    TextField(
                      controller: labelController,
                      decoration: const InputDecoration(
                        labelText: 'Goal description',
                        border: OutlineInputBorder(),
                      ),
                    ),
                    const SizedBox(height: 12),
                    SwitchListTile(
                      contentPadding: EdgeInsets.zero,
                      title: const Text('Track progress'),
                      value: includeProgress,
                      onChanged: (value) {
                        setStateDialog(() {
                          includeProgress = value;
                        });
                      },
                    ),
                    if (includeProgress) ...[
                      const SizedBox(height: 8),
                      Slider(
                        value: progressValue,
                        divisions: 20,
                        onChanged: (value) {
                          setStateDialog(() {
                            progressValue = value;
                          });
                        },
                      ),
                      Align(
                        alignment: Alignment.centerRight,
                        child: Text(
                          'Progress: ${(progressValue * 100).round()}%',
                          style: const TextStyle(fontWeight: FontWeight.w500),
                        ),
                      ),
                    ],
                    const SizedBox(height: 12),
                    TextField(
                      controller: dueDateController,
                      decoration: const InputDecoration(
                        labelText: 'Due date (optional)',
                        border: OutlineInputBorder(),
                      ),
                    ),
                  ],
                ),
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(ctx),
                  child: const Text('Cancel'),
                ),
                ElevatedButton(
                  onPressed: () {
                    final label = labelController.text.trim();
                    if (label.isEmpty) {
                      return;
                    }

                    final newGoal = <String, dynamic>{
                      'label': label,
                      'icon': isHealth
                          ? Icons.flag.codePoint
                          : Icons.emoji_events.codePoint,
                      'done': false,
                    };

                    final due = dueDateController.text.trim();
                    if (due.isNotEmpty) {
                      newGoal['due'] = due;
                    }

                    if (includeProgress) {
                      newGoal['progress'] = progressValue;
                    }

                    setState(() {
                      if (isHealth) {
                        healthGoals.add(newGoal);
                      } else {
                        personalGoals.add(newGoal);
                      }
                    });

                    _saveGoals();
                    Navigator.pop(ctx);
                  },
                  child: const Text('Add Goal'),
                ),
              ],
            );
          },
        );
      },
    ).then((_) {
      labelController.dispose();
      dueDateController.dispose();
    });
  }

  Widget _buildGoalTile(Map<String, dynamic> goal, bool isHealth, int index) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 20),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: const Color(0xFF1E1E1E),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Container(
            padding: const EdgeInsets.all(10),
            decoration: BoxDecoration(
              color: Colors.pink.withOpacity(0.2),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Icon(IconData(goal['icon'], fontFamily: 'MaterialIcons'),
                color: Colors.pink),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(goal['label'],
                    style: const TextStyle(
                        color: Colors.white,
                        fontSize: 16,
                        fontWeight: FontWeight.w500)),
                if (goal.containsKey('progress'))
                  Padding(
                    padding: const EdgeInsets.only(top: 8.0),
                    child: LinearProgressIndicator(
                      value: goal['progress'],
                      backgroundColor: Colors.grey[800],
                      color: Colors.pink,
                    ),
                  ),
                if (goal.containsKey('due'))
                  Padding(
                    padding: const EdgeInsets.only(top: 6.0),
                    child: Text("Due: ${goal['due']}",
                        style:
                            const TextStyle(fontSize: 13, color: Colors.grey)),
                  )
              ],
            ),
          ),
          const SizedBox(width: 12),
          IconButton(
            icon: Icon(
              goal['done'] ? Icons.delete : Icons.check_circle_outline,
              color: goal['done'] ? Colors.red : Colors.white,
            ),
            onPressed: () =>
                _toggleGoal(isHealth ? healthGoals : personalGoals, index),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF121212),
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        title: const Text('Goal Tracking',
            style: TextStyle(fontSize: 26, fontWeight: FontWeight.bold)),
      ),
      body: ListView(
        children: [
          // Health Goals
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 8),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(healthTitle,
                    style: const TextStyle(
                        color: Colors.grey,
                        fontWeight: FontWeight.bold,
                        fontSize: 14)),
                IconButton(
                  icon: const Icon(Icons.edit, color: Colors.pink),
                  onPressed: () => _changeSectionName(true),
                ),
              ],
            ),
          ),
          ...healthGoals
              .asMap()
              .entries
              .map((e) => _buildGoalTile(e.value, true, e.key))
              .toList(),

          const SizedBox(height: 30),

          // Personal Goals
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 8),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(personalTitle,
                    style: const TextStyle(
                        color: Colors.grey,
                        fontWeight: FontWeight.bold,
                        fontSize: 14)),
                IconButton(
                  icon: const Icon(Icons.edit, color: Colors.pink),
                  onPressed: () => _changeSectionName(false),
                ),
              ],
            ),
          ),
          ...personalGoals
              .asMap()
              .entries
              .map((e) => _buildGoalTile(e.value, false, e.key))
              .toList(),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        backgroundColor: Colors.pink,
        child: const Icon(Icons.add, size: 30),
        onPressed: _showAddGoalDialog,
      ),
    );
  }
}
